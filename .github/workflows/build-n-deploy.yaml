name: "Build and deploy yrkesskade skjema"
on:
  push:
    branches:
      - main
      - dev
env:
  "IMAGE": "ghcr.io/${{ github.repository }}:${{ github.sha }}"
jobs:
  cypress-run:
    name: Test frontend
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: "actions/setup-node@v2"
        with:
          node-version: "14"
          cache: "yarn"
          registry-url: 'https://npm.pkg.github.com'
          scope: '@navikt'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: "install server dependencies Yarn"
        run: "yarn install --frozen-lockfile"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: "install dependencies Yarn"
        run: "yarn install --frozen-lockfile"
        working-directory: "client"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: "install test dependencies Yarn"
        run: "yarn install --frozen-lockfile"
        working-directory: "test"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          project: ./test
          build: yarn build-prod
          start: yarn dev
          wait-on: 'http://localhost:3001'

  frackend-test:
    name: Test frackend
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-node@v2"
        with:
          node-version: "14"
          cache: "yarn"
          registry-url: 'https://npm.pkg.github.com'
          scope: '@navikt'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run frackend test
        run: yarn test

  build:
    name: Build
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v2"
      - uses: "actions/setup-node@v2"
        with:
          node-version: "14"
          cache: "yarn"
          registry-url: 'https://npm.pkg.github.com'
          scope: '@navikt'
      - name: "install server dependencies Yarn"
        run: "yarn install --frozen-lockfile"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: "install dependencies Yarn"
        run: "yarn install --frozen-lockfile"
        working-directory: "client"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: "Bygg alt"
        run: "yarn run build-prod"
      - name: "Login to GitHub Docker Registry"
        uses: "docker/login-action@v1"
        with:
          "registry": "ghcr.io"
          "username": "${{ github.actor }}"
          "password": "${{ secrets.GITHUB_TOKEN }}"
      - name: "Build and push the Docker image"
        run: "docker build --pull --tag ${IMAGE} . && docker push ${IMAGE}"

  deployAppToDev:
    if: github.ref == 'refs/heads/dev'
    name: "Deploy app to dev"
    needs: "build"
    runs-on: "ubuntu-18.04"
    steps:
      - uses: "actions/checkout@v2"
      - name: "Deploy to DEV"
        uses: "nais/deploy/actions/deploy@v1"
        env:
          "APIKEY": "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          "CLUSTER": "dev-gcp"
          "RESOURCE": ".nais/nais.yaml"
          "VARS": ".nais/dev.yaml"

  deployAlertsToDev:
    if: github.ref == 'refs/heads/dev'
    name: "Deploy alerts to dev"
    needs: "build"
    runs-on: "ubuntu-18.04"
    steps:
      - uses: "actions/checkout@v2"
      - name: "Deploy alerts to DEV"
        uses: "nais/deploy/actions/deploy@v1"
        env:
          "APIKEY": "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          "CLUSTER": "dev-gcp"
          "RESOURCE": ".nais/alerts-dev.yaml"
          "VARS": ".nais/dev.yaml"

  deployAppToProd:
    if: github.ref == 'refs/heads/main'
    name: Deploy app to prod
    needs: [cypress-run, frackend-test]
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2"
      - name: Deploy to PROD
        uses: "nais/deploy/actions/deploy@v1"
        env:
          "APIKEY": "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          "CLUSTER": "prod-gcp"
          "RESOURCE": ".nais/nais.yaml"
          "VARS": ".nais/prod.yaml"

  deployAlertsToProd:
    if: github.ref == 'refs/heads/main'
    name: Deploy alerts to prod
    needs: [cypress-run, frackend-test]
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2"
      - name: Deploy alerts to PROD
        uses: "nais/deploy/actions/deploy@v1"
        env:
          "APIKEY": "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          "CLUSTER": "prod-gcp"
          "RESOURCE": ".nais/alerts-prod.yaml"
          "VARS": ".nais/prod.yaml"
